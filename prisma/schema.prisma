generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model client_roles {
  role_id   Int      @id(map: "roles_pkey") @default(autoincrement())
  role_name String?  @db.VarChar(20)
  client    client[]
}

model contact_roles {
  role_id       Int             @id(map: "phone_roles_pkey") @default(autoincrement())
  name          String
  client_email  client_email[]
  client_phones client_phones[]
}

model client {
  personal_data      Json?
  professional_data  Json?
  address            Json?
  client_id          Int             @id(map: "clients_pkey") @default(autoincrement())
  role_id            Int             @db.SmallInt
  bi_number          String?
  membership_number  String?
  access_code        String?
  authentication_otp String?
  first_login        Boolean?
  token              String?
  account            account[]
  client_roles       client_roles    @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_role")
  client_email       client_email[]
  client_images      client_images[]
  client_phones      client_phones[]
  friends            friends[]
}

model client_email {
  email_id      Int           @id(map: "user_email_pkey") @default(autoincrement())
  email_address String
  verified      Boolean       @default(false)
  role_id       Int           @db.SmallInt
  client_id     Int?          @db.SmallInt
  token         String?
  complete      Boolean?
  contact_roles contact_roles @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_role_id")
  client        client?       @relation(fields: [client_id], references: [client_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_id")
}

model client_phones {
  id_phone      Int           @id(map: "client_phone_pkey") @default(autoincrement())
  phone_number  BigInt
  verified      Boolean       @default(false)
  role_id       Int           @default(1) @db.SmallInt
  client_id     Int           @db.SmallInt
  contact_roles contact_roles @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_role")
  client        client        @relation(fields: [client_id], references: [client_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_mid")
}

model client_images {
  id_client_image Int          @id(map: "users_images_pkey") @default(autoincrement())
  path            String?
  client_id       Int?         @db.SmallInt
  image_role      Int?         @db.SmallInt
  client          client?      @relation(fields: [client_id], references: [client_id], onDelete: NoAction, onUpdate: NoAction, map: "client_id_fk")
  image_roles     image_roles? @relation(fields: [image_role], references: [role_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_image_role")
}

model image_roles {
  role_id       Int             @id @default(autoincrement())
  name          String?
  client_images client_images[]
}

model account {
  account_id         Int      @id @default(autoincrement())
  client_id          Int?     @db.SmallInt
  account_iban       String?
  created_at         String?
  account_number     String?
  account_nbi        String?
  bic                String?
  account_role       Int?     @db.SmallInt
  available_balance  Float?
  authorized_balance Float?
  state              String?
  currency           String?
  up_balance         Float?
  local              String?
  area               String?
  client             client?  @relation(fields: [client_id], references: [client_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_client_id")
  card               card[]
  entity             entity[]
}

model card {
  card_id    Int         @id @default(autoincrement())
  number     BigInt?
  role_id    Int?        @db.SmallInt
  account_id Int?        @db.SmallInt
  created_at String?
  pin        String?
  nickname   String?
  state      String?
  account    account?    @relation(fields: [account_id], references: [account_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_account_id")
  card_roles card_roles? @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_role_id")
}

model card_roles {
  role_id Int    @id @default(autoincrement())
  name    String
  card    card[]
}

model transfer_type {
  type_id   Int         @id @default(autoincrement())
  name      String?
  transfers transfers[]
}

model transfers {
  id                   Int           @id(map: "transfer_pkey") @default(autoincrement())
  balance              Decimal?      @db.Decimal
  accountFrom          String?
  accountTo            String?
  transfer_description String?
  receptor_description String?
  date                 String?
  status               String?
  type                 Int           @default(autoincrement())
  emissor_description  String?
  transfer_type        transfer_type @relation(fields: [type], references: [type_id], onDelete: NoAction, onUpdate: NoAction, map: "type_fk")
  upmoney              upmoney[]
}

model friends {
  id        Int     @id @default(autoincrement())
  client_id Int?    @db.SmallInt
  friend_id Int?    @db.SmallInt
  nickname  String?
  client    client? @relation(fields: [client_id], references: [client_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_client_id")
}

model money_requests {
  id        Int     @id @default(autoincrement())
  emailFrom String?
  emailTo   String?
  balance   Float?
  date      String?
  status    Int?    @db.SmallInt
}

model request_status {
  id      Int       @id @default(autoincrement())
  name    String?
  upmoney upmoney[]
}

model notifications {
  id                  Int                  @id @default(autoincrement())
  tittle              String?
  email               String?
  type                Int?                 @db.SmallInt
  notifications_types notifications_types? @relation(fields: [type], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_type")
}

model notifications_types {
  id            Int             @id @default(autoincrement())
  name          String?
  notifications notifications[]
}

model account_roles {
  role_id Int     @id @default(autoincrement())
  name    String?
}

model entity {
  entity_id   Int      @id(map: "entitys_pkey") @default(autoincrement())
  reference   String?
  name        String?
  balance     String?
  account_id  Int?     @db.SmallInt
  description String?
  products    Json?
  logo        String?
  account     account? @relation(fields: [account_id], references: [account_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_account_id")
}

model upmoney {
  id             Int             @id @default(autoincrement())
  number         BigInt?
  pin            String?
  date           String?
  balance        Float?
  accountFrom    String?
  accountTo      String?
  status         Int?            @db.SmallInt
  transferId     Int?            @db.SmallInt
  request_status request_status? @relation(fields: [status], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_status")
  transfers      transfers?      @relation(fields: [transferId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tranferId")
}

model pay_references {
  id                  Int     @id @default(autoincrement())
  reference           String?
  description         String?
  balance             Float?
  date                String?
  state               Int?    @db.SmallInt
  entity              String?
  emissor_description String?
  payer_description   String?
  payer_nbi           String?
}
